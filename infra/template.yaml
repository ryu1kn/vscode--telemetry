AWSTemplateFormatVersion: '2010-09-09'
Description: VS Code telemetry
Parameters:
  DomainName:
    Type: String
  HostedZoneId:
    Type: String
  CertificateArn:
    Type: String
Mappings:
  Variables:
    Api:
      StageName: default
    CloudFrontDistribution:
      HostedZoneId: Z2FDTNDATAQYW2
Resources:
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub ${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: !FindInMap [Variables, CloudFrontDistribution, HostedZoneId]
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref DomainName
        DefaultCacheBehavior:
          ForwardedValues:
            Cookies:
              Forward: all
            QueryString: true
            Headers:
            - Authorization
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          Compress: true
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          TargetOriginId: vscode-telemetry-api
          ViewerProtocolPolicy: https-only
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName: !Sub ${RestApi}.execute-api.${AWS::Region}.amazonaws.com
          OriginPath:
            Fn::Sub:
            - /${StageName}
            - StageName: !FindInMap [Variables, Api, StageName]
          Id: vscode-telemetry-api
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub VS Code Telemetry - ${AWS::StackName}
      Description: API used for VS Code Telemetry requests
      FailOnWarnings: true
      Body:
        swagger: '2.0'
        info:
          version: '2019-09-22T14:24:28Z'
          title: VS Code Telemetry API
        schemes:
        - https
        paths:
          /telemetry-data:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
                  - LambdaArn: !GetAtt LambdaFunction.Arn
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        definitions:
          Empty:
            type: object
            title: Empty Schema
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
      - HttpMethod: '*'
        ResourcePath: /*
        ThrottlingRateLimit: 10
        ThrottlingBurstLimit: 20
      RestApiId: !Ref RestApi
      StageName: !FindInMap [Variables, Api, StageName]
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudwatch:*
            Resource: '*'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-LambdaFunction
      Description: VS Code Telemetry app
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event, context) {
            console.log("EVENT: \n" + JSON.stringify(event, null, 2))
            return context.logStreamName
          }
      Runtime: nodejs8.10
      Timeout: "3"
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunction}
      RetentionInDays: 14
Outputs:
  RestApiId:
    Description: Root URL of the API
    Value: !Ref RestApi
  ApiStageName:
    Value: !FindInMap [Variables, Api, StageName]
